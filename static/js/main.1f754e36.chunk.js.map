{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","validatedTitle","trim","addItem","errorMessage","style","color","value","onChange","e","currentTarget","onKeyPress","key","className","onClick","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","filter","tasksJSXElements","tasks","map","t","taskClass","isDone","type","checked","changeTaskStatus","id","todoListID","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","changeTodoListFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tl","taskID","copyTasks","newTask","todoListsComponents","tasksForTodoList","getFilteredTasks","newTodoListID","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1f754e36.chunk.js","sourcesContent":["import {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<boolean>(false)\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    setError(false)\r\n  }\r\n  const onClickAddItem = () => {\r\n    const validatedTitle = title.trim()\r\n    if (validatedTitle) {\r\n      props.addItem(validatedTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle('')\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      onClickAddItem()\r\n    }\r\n  }\r\n  const errorMessage = error\r\n      ? <div style={{color: 'red'}}>Title is required!</div>\r\n      : null\r\n  return (\r\n      <div>\r\n        <input value={title}\r\n               onChange={onChangeTitle}\r\n               onKeyPress={onKeyPressAddItem}\r\n               className={error ? 'error' : ''}\r\n        />\r\n        <button onClick={onClickAddItem}>+</button>\r\n        {errorMessage}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default AddItemForm","import {ChangeEvent, KeyboardEvent, useState} from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n  const [title, setTitle] = useState<string>(props.title)\r\n  const [editMode, setEditMode] = useState(false)\r\n  const onEditMode = () => setEditMode(true)\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n  const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      offEditMode()\r\n    }\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n  return (\r\n      editMode\r\n          ? <input value={title} autoFocus={true} onBlur={offEditMode} onChange={onChangeTitle}\r\n                   onKeyPress={onEnterOffEditMode}/>\r\n          : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan","import {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\n\r\ntype PropsTodoListType = {\r\n  todoListID: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  addTask: (title: string, todoListID: string) => void\r\n  changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n  changeTodoListTitle: (title: string, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n  const {filter} = props\r\n\r\n  const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n\r\n  const tasksJSXElements = props.tasks.map(t => {\r\n    const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n      props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n    }\r\n    const changeTaskTitle = (title: string) => {\r\n      props.changeTaskTitle(t.id, title, props.todoListID)\r\n    }\r\n\r\n    let taskClass = t.isDone ? 'is-done' : ''\r\n    return (\r\n        <li key={t.id} className={taskClass}>\r\n          <input type=\"checkbox\"\r\n                 checked={t.isDone}\r\n                 onChange={changeTaskStatus}\r\n          />\r\n          <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n          <button onClick={removeTask}>X</button>\r\n        </li>\r\n    )\r\n  })\r\n\r\n  const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n\r\n  const onClickSetAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n  const onClickSetActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n  const onClickSetCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n\r\n  return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n          <button onClick={() => props.removeTodoList(props.todoListID)}>X</button>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul>\r\n          {tasksJSXElements}\r\n        </ul>\r\n        <div>\r\n          <button className={filter === 'all' ? 'active-filter' : ''}\r\n                  onClick={onClickSetAllFilter}>All\r\n          </button>\r\n          <button className={filter === 'active' ? 'active-filter' : ''}\r\n                  onClick={onClickSetActiveFilter}>Active\r\n          </button>\r\n          <button className={filter === 'completed' ? 'active-filter' : ''}\r\n                  onClick={onClickSetCompletedFilter}>Completed\r\n          </button>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","import {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n  const todoListID_1 = v1()\r\n  const todoListID_2 = v1()\r\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n  ])\r\n\r\n  const [tasks, setTasks] = useState<TasksStateType>(\r\n      {\r\n        [todoListID_1]: [\r\n          {id: v1(), title: 'HTML', isDone: true},\r\n          {id: v1(), title: 'CSS', isDone: true},\r\n          {id: v1(), title: 'JS', isDone: true},\r\n          {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n          {id: v1(), title: 'Milk', isDone: false},\r\n          {id: v1(), title: 'Bread', isDone: true},\r\n          {id: v1(), title: 'Meat', isDone: false},\r\n        ]\r\n      }\r\n  )\r\n\r\n  function changeTodoListFilter(filter: FilterValuesType, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n  }\r\n\r\n  function changeTodoListTitle(title: string, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl))\r\n  }\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID);\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function addTask(title: string, todoListID: string) {\r\n    const newTask: TaskType = {\r\n      id: v1(),\r\n      title,\r\n      isDone: false\r\n    }\r\n    setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n  }\r\n\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n\r\n  function removeTodoList(todoListID: string) {\r\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n    const copyTasks = {...tasks}\r\n    delete copyTasks[todoListID]\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function addTodoList(title: string) {\r\n    const newTodoListID = v1()\r\n    const newTodoList: TodoListType = {\r\n      id: newTodoListID,\r\n      title,\r\n      filter: 'all'\r\n    }\r\n    setTodoLists([...todoLists, newTodoList])\r\n    setTasks({...tasks, [newTodoListID]: []})\r\n  }\r\n\r\n\r\n  function getFilteredTasks(tl: TodoListType) {\r\n    switch (tl.filter) {\r\n      case 'active':\r\n        return tasks[tl.id].filter(t => !t.isDone)\r\n      case 'completed':\r\n        return tasks[tl.id].filter(t => t.isDone)\r\n      default:\r\n        return tasks[tl.id]\r\n    }\r\n  }\r\n\r\n  const todoListsComponents = todoLists.map(tl => {\r\n    const tasksForTodoList = getFilteredTasks(tl)\r\n    return (\r\n        <TodoList\r\n            key={tl.id}\r\n            todoListID={tl.id}\r\n            title={tl.title}\r\n            filter={tl.filter}\r\n            tasks={tasksForTodoList}\r\n            removeTask={removeTask}\r\n            removeTodoList={removeTodoList}\r\n            changeTodoListFilter={changeTodoListFilter}\r\n            changeTodoListTitle={changeTodoListTitle}\r\n            changeTaskStatus={changeTaskStatus}\r\n            changeTaskTitle={changeTaskTitle}\r\n            addTask={addTask}/>\r\n    )\r\n  })\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <AddItemForm addItem={addTodoList}/>\r\n        {todoListsComponents}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}