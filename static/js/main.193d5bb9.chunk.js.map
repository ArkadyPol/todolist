{"version":3,"sources":["state/tasks-reducer.ts","state/todolists-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","state/store.ts","serviceWorker.ts","AppWithRedux.tsx","TodoList.tsx","Task.tsx","index.tsx"],"names":[],"mappings":"gtBAuCA,KAAM,GAA+B,GAExB,EAAe,CAAC,EAAQ,EAAc,IAAuC,CACxF,OAAQ,EAAO,UACR,cACH,MAAO,QAAI,GAAJ,EAAY,EAAO,YAAa,EAAM,EAAO,YAAY,OAAO,GAAK,EAAE,KAAO,EAAO,cACzF,WACH,KAAM,GAAoB,CACxB,GAAI,cACJ,MAAO,EAAO,MACd,OAAQ,IAEV,MAAO,QAAI,GAAJ,EAAY,EAAO,YAAa,CAAC,EAAS,GAAG,EAAM,EAAO,mBAC9D,qBACH,MAAO,QACF,GADE,EAEJ,EAAO,YAAa,EAAM,EAAO,YAAY,IAAI,GAAK,EAAE,KAAO,EAAO,OAAS,OAC3E,GAD2E,CAE9E,OAAQ,EAAO,SACb,SAEH,oBACH,MAAO,QACF,GADE,EAEJ,EAAO,YAAa,EAAM,EAAO,YAAY,IAAI,GAAK,EAAE,KAAO,EAAO,OAAS,OAC3E,GAD2E,CAE9E,MAAO,EAAO,QACZ,SAEH,eACH,MAAO,QAAI,GAAJ,EAAY,EAAO,YAAa,SACpC,kBACH,KAAM,GAAW,KAAI,GACrB,aAAO,GAAS,EAAO,YAChB,UAEP,MAAO,KAIA,EAAe,CAAC,EAAgB,IAA8C,EACzF,KAAM,cACN,SACA,eAGW,EAAY,CAAC,EAAe,IAA2C,EAClF,KAAM,WACN,QACA,eAGW,EAAqB,CAAC,EAAgB,EAAiB,IAAoD,EACtH,KAAM,qBACN,SACA,SACA,eAGW,EAAoB,CAAC,EAAgB,EAAe,IAAmD,EAClH,KAAM,oBACN,SACA,QACA,gB,qmBC1EF,KAAM,GAA+B,GAExB,EAAmB,CAAC,EAAY,EAAc,IAA4C,CACrG,OAAQ,EAAO,UACR,kBACH,MAAO,GAAU,OAAO,GAAM,EAAG,KAAO,EAAO,gBAC5C,eACH,KAAM,GAA4B,CAChC,GAAI,EAAO,WACX,MAAO,EAAO,MACd,OAAQ,OAEV,MAAO,CAAC,GAAG,EAAW,OACnB,yBACH,MAAO,GAAU,IAAI,GAAM,EAAG,KAAO,EAAO,WAAa,OAAI,GAAJ,CAAQ,OAAQ,EAAO,SAAU,OACvF,wBACH,MAAO,GAAU,IAAI,GAAM,EAAG,KAAO,EAAO,WAAa,OAAI,GAAJ,CAAQ,MAAO,EAAO,QAAS,WAExF,MAAO,KAIA,EAAoB,GAA0C,EACzE,KAAM,kBACN,eAGW,EAAiB,GAAkC,EAC9D,KAAM,eACN,QACA,WAAY,gBAGD,EAAyB,CAAC,EAA0B,IAAgD,EAC/G,KAAM,yBACN,SACA,eAGW,EAAwB,CAAC,EAAe,IAA+C,EAClG,KAAM,wBACN,QACA,gB,gCCtEF,yDAQA,KAAM,GAAc,eAAM,GAAgC,CACxD,KAAM,CAAC,EAAO,GAAY,mBAAiB,IACrC,CAAC,EAAO,GAAY,mBAAkB,IACtC,EAAiB,GAAqC,CAC1D,EAAS,EAAE,cAAc,OACrB,GACF,EAAS,KAGP,EAAiB,IAAM,CAC3B,KAAM,GAAiB,EAAM,OACzB,EACF,EAAM,QAAQ,GAEd,EAAS,IAEX,EAAS,KAEL,EAAqB,GAAuC,CAC5D,EAAE,MAAQ,SACZ,KAGJ,MACI,iBAAC,MAAD,KACE,gBAAC,IAAD,CACI,QAAS,WACT,KAAM,QACN,MAAO,EACP,SAAU,EACV,WAAY,EACZ,MAAO,QACP,QACA,WAAY,GAAS,uBAEzB,gBAAC,IAAD,CAAY,QAAS,EAAgB,MAAO,WAC1C,gBAAC,IAAD,UAMK,Q,iDClDf,yCASA,KAAM,GAAe,eAAM,GAAiC,CAC1D,KAAM,CAAC,EAAO,GAAY,mBAAiB,EAAM,OAC3C,CAAC,EAAU,GAAe,mBAAS,IACnC,EAAa,IAAM,EAAY,IAC/B,EAAc,IAAM,CACxB,EAAY,IACZ,EAAM,YAAY,IAEd,EAAsB,GAAuC,CAC7D,EAAE,MAAQ,SACZ,KAGE,EAAiB,GAAqC,EAAS,EAAE,cAAc,OAErF,MACI,GAGI,gBAAC,IAAD,CACI,MAAO,EACP,UAAW,GACX,SAAU,EACV,WAAY,EACZ,OAAQ,IAEV,gBAAC,OAAD,CAAM,cAAe,GAAa,EAAM,SAIrC,Q,iDCvCf,4DAKA,KAAM,GAAc,YAAgB,CAClC,MAAO,IACP,UAAW,MAEA,EAAQ,YAAY,GAKjC,OAAO,MAAQ,G,gCCFf,qCAAM,GAAc,QAClB,OAAO,SAAS,WAAa,aAE3B,OAAO,SAAS,WAAa,SAE7B,OAAO,SAAS,SAAS,MACvB,2DASC,WAAkB,EAAiB,CACxC,GAA6C,iBAAmB,WAAW,CAMzE,GAAI,GAJkB,KACpB,YACA,OAAO,SAAS,MAEJ,SAAW,OAAO,SAAS,OAIvC,OAGF,OAAO,iBAAiB,OAAQ,IAAM,CACpC,KAAM,GAAQ,8BAEV,EAEF,GAAwB,EAAO,GAI/B,UAAU,cAAc,MAAM,KAAK,IAAM,CACvC,QAAQ,IACN,gHAMJ,EAAgB,EAAO,MAM/B,WAAyB,EAAe,EAAiB,CACvD,UAAU,cACP,SAAS,GACT,KAAK,GAAgB,CACpB,EAAa,cAAgB,IAAM,CACjC,KAAM,GAAmB,EAAa,WAClC,GAAoB,MAGxB,GAAiB,cAAgB,IAAM,CACjC,EAAiB,QAAU,aAC7B,CAAI,UAAU,cAAc,WAI1B,SAAQ,IACN,iHAKE,GAAU,EAAO,UACnB,EAAO,SAAS,IAMlB,SAAQ,IAAI,sCAGR,GAAU,EAAO,WACnB,EAAO,UAAU,UAO5B,MAAM,GAAS,CACd,QAAQ,MAAM,4CAA6C,KAIjE,WAAiC,EAAe,EAAiB,CAE/D,MAAM,EAAO,CACX,QAAS,CAAE,iBAAkB,YAE5B,KAAK,GAAY,CAEhB,KAAM,GAAc,EAAS,QAAQ,IAAI,gBAEvC,EAAS,SAAW,KACnB,GAAe,MAAQ,EAAY,QAAQ,gBAAkB,GAG9D,UAAU,cAAc,MAAM,KAAK,GAAgB,CACjD,EAAa,aAAa,KAAK,IAAM,CACnC,OAAO,SAAS,aAKpB,EAAgB,EAAO,KAG1B,MAAM,IAAM,CACX,QAAQ,IACN,mEAKD,YAAsB,CACvB,iBAAmB,YACrB,UAAU,cAAc,MACrB,KAAK,GAAgB,CACpB,EAAa,eAEd,MAAM,GAAS,CACd,QAAQ,MAAM,EAAM,a,gCCjJ5B,kKAkCA,YAAwB,CACtB,KAAM,GAAY,YAA8C,GAAS,EAAM,WACzE,EAAQ,YAA8C,GAAS,EAAM,OAErE,EAAW,cAEX,EAAa,sBAAY,CAAC,EAAgB,IAAuB,CACrE,EAAS,YAAa,EAAQ,KAC7B,CAAC,IAEE,EAAU,sBAAY,CAAC,EAAe,IAAuB,CACjE,EAAS,YAAU,EAAO,KACzB,CAAC,IAEE,EAAmB,sBAAY,CAAC,EAAgB,EAAiB,IAAuB,CAC5F,EAAS,YAAmB,EAAQ,EAAQ,KAC3C,CAAC,IAEE,EAAkB,sBAAY,CAAC,EAAgB,EAAe,IAAuB,CACzF,EAAS,YAAkB,EAAQ,EAAO,KACzC,CAAC,IAEE,EAAuB,sBAAY,CAAC,EAA0B,IAAuB,CACzF,GAAI,GAAS,YAAuB,EAAQ,GAC5C,EAAS,IACR,CAAC,IAEE,EAAsB,sBAAY,CAAC,EAAe,IAAuB,CAC7E,EAAS,YAAsB,EAAO,KACrC,CAAC,IAEE,EAAiB,sBAAa,GAAuB,CACzD,KAAM,GAAS,YAAiB,GAChC,EAAS,IACR,CAAC,IAEE,EAAc,sBAAa,GAAkB,CACjD,KAAM,GAAS,YAAc,GAC7B,EAAS,IACR,CAAC,IAEE,EAAsB,EAAU,IAAI,GAGpC,gBAAC,IAAD,CAAM,KAAI,GAAC,IAAK,EAAG,IACjB,gBAAC,IAAD,CAAO,UAAW,EAAG,MAAO,CAAC,QAAS,SACpC,gBAAC,IAAD,CACI,WAAY,EAAG,GACf,MAAO,EAAG,MACV,OAAQ,EAAG,OACX,MAAO,EAAM,EAAG,IAChB,aACA,iBACA,uBACA,sBACA,mBACA,kBACA,eAMd,MACI,iBAAC,MAAD,CAAK,UAAU,OACb,gBAAC,IAAD,CAAQ,SAAU,UAChB,gBAAC,IAAD,CAAS,MAAO,CAAC,eAAgB,kBAC/B,gBAAC,IAAD,CAAY,MAAO,WACjB,gBAAC,IAAD,OAEF,gBAAC,IAAD,CAAY,QAAS,MAAM,aAG3B,gBAAC,IAAD,CACI,MAAO,UACP,QAAS,YACZ,WAGL,gBAAC,IAAD,CAAW,MAAK,IACd,gBAAC,IAAD,CAAM,UAAS,GAAC,MAAO,CAAC,QAAS,WAAW,gBAAC,IAAD,CAAa,QAAS,KAClE,gBAAC,IAAD,CAAM,UAAS,GAAC,QAAS,GAAG,IAAE,KAMzB,Q,iDCzHf,iFAsBA,KAAM,GAAW,eAAM,GAA6B,CAClD,KAAM,CAAC,SAAQ,SAAS,EAElB,EAAU,sBAAa,GAAkB,EAAM,QAAQ,EAAO,EAAM,YAAa,CAAC,EAAM,QAAS,EAAM,aAE7G,GAAI,GAAoC,EAExC,OAAQ,OACD,SACH,EAAmB,EAAM,OAAO,GAAK,CAAC,EAAE,QACxC,UACG,YACH,EAAmB,EAAM,OAAO,GAAK,EAAE,QACvC,MAGJ,KAAM,GAAkB,sBAAY,CAAC,EAAgB,EAAe,IAAuB,CACzF,EAAM,gBAAgB,EAAQ,EAAO,IACpC,CAAC,EAAM,kBACJ,EAAmB,sBAAY,CAAC,EAAgB,EAAiB,IAAuB,CAC5F,EAAM,iBAAiB,EAAQ,EAAQ,IACtC,CAAC,EAAM,mBACJ,EAAa,sBAAY,CAAC,EAAgB,IAAuB,CACrE,EAAM,WAAW,EAAQ,IACxB,CAAC,EAAM,aAEJ,EAAmB,EAAiB,IAAI,GAGxC,gBAAC,IAAD,CAAM,IAAK,EAAE,GAAI,KAAM,EAAG,kBACpB,mBAAoC,WAAY,EAAM,WAAY,gBAIxE,EAAsB,sBAAa,GAAkB,EAAM,oBAAoB,EAAO,EAAM,YAAa,CAAC,EAAM,oBAAqB,EAAM,aAC3I,EAAiB,sBAAY,IAAM,EAAM,eAAe,EAAM,YAAa,CAAC,EAAM,eAAgB,EAAM,aACxG,EAAsB,sBAAY,IAAM,EAAM,qBAAqB,MAAO,EAAM,YAAa,CAAC,EAAM,uBACpG,EAAyB,sBAAY,IAAM,EAAM,qBAAqB,SAAU,EAAM,YAAa,CAAC,EAAM,uBAC1G,EAA4B,sBAAY,IAAM,EAAM,qBAAqB,YAAa,EAAM,YAAa,CAAC,EAAM,uBAEtH,MACI,iBAAC,MAAD,KACE,gBAAC,KAAD,KACE,gBAAC,IAAD,CAAc,MAAO,EAAM,MAAO,YAAa,IAC/C,gBAAC,IAAD,CAAY,QAAS,EAAgB,MAAO,aAC1C,gBAAC,IAAD,QAGJ,gBAAC,IAAD,CAAa,QAAS,IACtB,gBAAC,KAAD,CAAI,MAAO,CAAC,UAAW,OAAQ,QAAS,IACrC,GAEH,gBAAC,MAAD,KACE,gBAAC,IAAD,CACI,QAAS,IAAW,MAAQ,YAAc,WAC1C,MAAO,UACP,KAAM,QACN,QAAS,GAAqB,OAElC,gBAAC,IAAD,CACI,MAAO,CAAC,WAAY,OACpB,QAAS,IAAW,SAAW,YAAc,WAC7C,MAAO,UACP,KAAM,QACN,QAAS,GAAwB,UAErC,gBAAC,IAAD,CACI,MAAO,CAAC,WAAY,OACpB,QAAS,IAAW,YAAc,YAAc,WAChD,MAAO,UACP,KAAM,QACN,QAAS,GAA2B,iBAOnC,Q,iDCnGf,iEAcA,KAAM,GAAO,eAAM,GAAqB,CACtC,GAAI,GAAY,EAAM,KAAK,OAAS,UAAY,GAEhD,KAAM,GAAa,IAAM,EAAM,WAAW,EAAM,KAAK,GAAI,EAAM,YACzD,EAAoB,GAAqC,CAC7D,EAAM,iBAAiB,EAAM,KAAK,GAAI,EAAE,cAAc,QAAS,EAAM,aAEjE,EAAkB,sBAAa,GAAkB,CACrD,EAAM,gBAAgB,EAAM,KAAK,GAAI,EAAO,EAAM,aACjD,CAAC,EAAM,gBAAiB,EAAM,KAAK,GAAI,EAAM,aAEhD,MACI,iBAAC,KAAD,KACI,gBAAC,OAAD,CAAM,UAAW,GACf,gBAAC,IAAD,CACI,KAAM,QACN,MAAO,UACP,QAAS,EAAM,KAAK,OACpB,SAAU,IAEd,gBAAC,IAAD,CAAc,MAAO,EAAM,KAAK,MAAO,YAAa,KAExD,gBAAC,IAAD,CAAY,QAAS,EAAY,MAAO,aACtC,gBAAC,IAAD,UAMK,Q,iDC5Cf,wFAOA,IAAS,OACL,gBAAC,IAAD,CAAU,WACR,gBAAC,IAAD,OACW,SAAS,eAAe,SAKzC,O","file":"static/js/main.193d5bb9.chunk.js","sourcesContent":["import {TasksStateType, TaskType} from '../App';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistAT, RemoveTodolistAT} from './todolists-reducer';\r\n\r\ntype RemoveTaskActionType = {\r\n  type: 'REMOVE-TASK'\r\n  taskId: string\r\n  todolistId: string\r\n}\r\n\r\ntype AddTaskActionType = {\r\n  type: 'ADD-TASK'\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\ntype ChangeTaskStatusActionType = {\r\n  type: 'CHANGE-TASK-STATUS'\r\n  taskID: string\r\n  isDone: boolean\r\n  todoListID: string\r\n}\r\n\r\ntype ChangeTaskTitleActionType = {\r\n  type: 'CHANGE-TASK-TITLE'\r\n  taskID: string\r\n  title: string\r\n  todoListID: string\r\n}\r\n\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistAT\r\n    | RemoveTodolistAT\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionType): TasksStateType => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TASK':\r\n      return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n    case 'ADD-TASK':\r\n      const newTask: TaskType = {\r\n        id: v1(),\r\n        title: action.title,\r\n        isDone: false\r\n      }\r\n      return {...state, [action.todolistId]: [newTask, ...state[action.todolistId]]}\r\n    case 'CHANGE-TASK-STATUS':\r\n      return {\r\n        ...state,\r\n        [action.todoListID]: state[action.todoListID].map(t => t.id === action.taskID ? {\r\n          ...t,\r\n          isDone: action.isDone\r\n        } : t)\r\n      }\r\n    case 'CHANGE-TASK-TITLE':\r\n      return {\r\n        ...state,\r\n        [action.todoListID]: state[action.todoListID].map(t => t.id === action.taskID ? {\r\n          ...t,\r\n          title: action.title\r\n        } : t)\r\n      }\r\n    case 'ADD-TODOLIST':\r\n      return {...state, [action.todolistId]: []}\r\n    case 'REMOVE-TODOLIST':\r\n      const newState = {...state}\r\n      delete newState[action.todoListID]\r\n      return newState\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => ({\r\n  type: 'REMOVE-TASK',\r\n  taskId,\r\n  todolistId,\r\n})\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => ({\r\n  type: 'ADD-TASK',\r\n  title,\r\n  todolistId\r\n})\r\n\r\nexport const changeTaskStatusAC = (taskID: string, isDone: boolean, todoListID: string): ChangeTaskStatusActionType => ({\r\n  type: 'CHANGE-TASK-STATUS',\r\n  taskID,\r\n  isDone,\r\n  todoListID\r\n})\r\n\r\nexport const changeTaskTitleAC = (taskID: string, title: string, todoListID: string): ChangeTaskTitleActionType => ({\r\n  type: 'CHANGE-TASK-TITLE',\r\n  taskID,\r\n  title,\r\n  todoListID\r\n})\r\n","import {FilterValuesType, TodoListType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistAT = {\r\n  type: 'REMOVE-TODOLIST'\r\n  todoListID: string\r\n}\r\n\r\nexport type AddTodolistAT = {\r\n  type: 'ADD-TODOLIST'\r\n  title: string\r\n  todolistId: string\r\n}\r\n\r\ntype ChangeTodoListFilterAT = {\r\n  type: 'CHANGE-TODOLIST-FILTER'\r\n  filter: FilterValuesType\r\n  todoListID: string\r\n}\r\n\r\ntype ChangeTodoListTitleAT = {\r\n  type: 'CHANGE-TODOLIST-TITLE'\r\n  title: string\r\n  todoListID: string\r\n}\r\n\r\nexport type ActionType = RemoveTodolistAT | AddTodolistAT | ChangeTodoListFilterAT | ChangeTodoListTitleAT\r\n\r\nconst initialState: TodoListType[] = []\r\n\r\nexport const todoListsReducer = (todoLists = initialState, action: ActionType): Array<TodoListType> => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return todoLists.filter(tl => tl.id !== action.todoListID)\r\n    case 'ADD-TODOLIST':\r\n      const newTodoList: TodoListType = {\r\n        id: action.todolistId,\r\n        title: action.title,\r\n        filter: 'all'\r\n      }\r\n      return [...todoLists, newTodoList]\r\n    case 'CHANGE-TODOLIST-FILTER':\r\n      return todoLists.map(tl => tl.id === action.todoListID ? {...tl, filter: action.filter} : tl)\r\n    case 'CHANGE-TODOLIST-TITLE':\r\n      return todoLists.map(tl => tl.id === action.todoListID ? {...tl, title: action.title} : tl)\r\n    default:\r\n      return todoLists\r\n  }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todoListID: string): RemoveTodolistAT => ({\r\n  type: 'REMOVE-TODOLIST',\r\n  todoListID\r\n})\r\n\r\nexport const AddTodolistAC = (title: string): AddTodolistAT => ({\r\n  type: 'ADD-TODOLIST',\r\n  title,\r\n  todolistId: v1()\r\n})\r\n\r\nexport const ChangeTodoListFilterAC = (filter: FilterValuesType, todoListID: string): ChangeTodoListFilterAT => ({\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  filter,\r\n  todoListID\r\n})\r\n\r\nexport const ChangeTodoListTitleAC = (title: string, todoListID: string): ChangeTodoListTitleAT => ({\r\n  type: 'CHANGE-TODOLIST-TITLE',\r\n  title,\r\n  todoListID\r\n})","import {ChangeEvent, KeyboardEvent, useState, memo} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = memo((props: AddItemFormPropsType) => {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<boolean>(false)\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    if (error) {\r\n      setError(false)\r\n    }\r\n  }\r\n  const onClickAddItem = () => {\r\n    const validatedTitle = title.trim()\r\n    if (validatedTitle) {\r\n      props.addItem(validatedTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle('')\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      onClickAddItem()\r\n    }\r\n  }\r\n  return (\r\n      <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            size={'small'}\r\n            value={title}\r\n            onChange={onChangeTitle}\r\n            onKeyPress={onKeyPressAddItem}\r\n            label={'Title'}\r\n            error={error}\r\n            helperText={error && 'Title is required!'}\r\n        />\r\n        <IconButton onClick={onClickAddItem} color={'primary'}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n})\r\n\r\nexport default AddItemForm","import {ChangeEvent, KeyboardEvent, memo, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\n\r\nconst EditableSpan = memo((props: EditableSpanPropsType) => {\r\n  const [title, setTitle] = useState<string>(props.title)\r\n  const [editMode, setEditMode] = useState(false)\r\n  const onEditMode = () => setEditMode(true)\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n  const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      offEditMode()\r\n    }\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n  return (\r\n      editMode\r\n          ? /*<input value={title} autoFocus={true} onBlur={offEditMode} onChange={onChangeTitle}\r\n                   onKeyPress={onEnterOffEditMode}/>*/\r\n          <TextField\r\n              value={title}\r\n              autoFocus={true}\r\n              onChange={onChangeTitle}\r\n              onKeyPress={onEnterOffEditMode}\r\n              onBlur={offEditMode}\r\n          />\r\n          : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n})\r\n\r\nexport default EditableSpan","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todoListsReducer\r\n})\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './App.css';\r\nimport TodoList from './TodoList';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n  AddTodolistAC,\r\n  ChangeTodoListFilterAC,\r\n  ChangeTodoListTitleAC,\r\n  RemoveTodolistAC,\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {useCallback} from 'react';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n  const todolists = useSelector<AppRootStateType, TodoListType[]>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n    dispatch(removeTaskAC(taskID, todoListID))\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback((title: string, todoListID: string) => {\r\n    dispatch(addTaskAC(title, todoListID))\r\n  }, [dispatch])\r\n\r\n  const changeTaskStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\r\n    dispatch(changeTaskStatusAC(taskID, isDone, todoListID))\r\n  }, [dispatch])\r\n\r\n  const changeTaskTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n    dispatch(changeTaskTitleAC(taskID, title, todoListID))\r\n  }, [dispatch])\r\n\r\n  const changeTodoListFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n    let action = ChangeTodoListFilterAC(filter, todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeTodoListTitle = useCallback((title: string, todoListID: string) => {\r\n    dispatch(ChangeTodoListTitleAC(title, todoListID))\r\n  }, [dispatch])\r\n\r\n  const removeTodoList = useCallback((todoListID: string) => {\r\n    const action = RemoveTodolistAC(todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const addTodoList = useCallback((title: string) => {\r\n    const action = AddTodolistAC(title)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const todoListsComponents = todolists.map(tl => {\r\n\r\n    return (\r\n        <Grid item key={tl.id}>\r\n          <Paper elevation={5} style={{padding: '20px'}}>\r\n            <TodoList\r\n                todoListID={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={tasks[tl.id]}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n                addTask={addTask}/>\r\n          </Paper>\r\n        </Grid>\r\n    )\r\n  })\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <AppBar position={'static'}>\r\n          <Toolbar style={{justifyContent: 'space-between'}}>\r\n            <IconButton color={'inherit'}>\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant={'h6'}>\r\n              Todolists\r\n            </Typography>\r\n            <Button\r\n                color={'inherit'}\r\n                variant={'outlined'}\r\n            >Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding: '20px 0'}}><AddItemForm addItem={addTodoList}/></Grid>\r\n          <Grid container spacing={5}> {todoListsComponents}</Grid>\r\n        </Container>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default AppWithRedux\r\n","import {memo, useCallback} from 'react';\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\nimport Task from './Task';\r\n\r\ntype PropsTodoListType = {\r\n  todoListID: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  addTask: (title: string, todoListID: string) => void\r\n  changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n  changeTodoListTitle: (title: string, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\nconst TodoList = memo((props: PropsTodoListType) => {\r\n  const {filter, tasks} = props\r\n\r\n  const addTask = useCallback((title: string) => props.addTask(title, props.todoListID), [props.addTask, props.todoListID])\r\n\r\n  let tasksForTodolist: Array<TaskType> = tasks\r\n\r\n  switch (filter) {\r\n    case 'active':\r\n      tasksForTodolist = tasks.filter(t => !t.isDone)\r\n      break\r\n    case 'completed':\r\n      tasksForTodolist = tasks.filter(t => t.isDone)\r\n      break\r\n  }\r\n\r\n  const changeTaskTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n    props.changeTaskTitle(taskID, title, todoListID)\r\n  }, [props.changeTaskTitle])\r\n  const changeTaskStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\r\n    props.changeTaskStatus(taskID, isDone, todoListID)\r\n  }, [props.changeTaskStatus])\r\n  const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n    props.removeTask(taskID, todoListID)\r\n  }, [props.removeTask])\r\n\r\n  const tasksJSXElements = tasksForTodolist.map(t => {\r\n\r\n    return (\r\n        <Task key={t.id} task={t} changeTaskTitle={changeTaskTitle}\r\n              changeTaskStatus={changeTaskStatus} todoListID={props.todoListID} removeTask={removeTask}/>\r\n    )\r\n  })\r\n\r\n  const changeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(title, props.todoListID), [props.changeTodoListTitle, props.todoListID])\r\n  const removeTodolist = useCallback(() => props.removeTodoList(props.todoListID), [props.removeTodoList, props.todoListID])\r\n  const onClickSetAllFilter = useCallback(() => props.changeTodoListFilter('all', props.todoListID), [props.changeTodoListFilter])\r\n  const onClickSetActiveFilter = useCallback(() => props.changeTodoListFilter('active', props.todoListID), [props.changeTodoListFilter])\r\n  const onClickSetCompletedFilter = useCallback(() => props.changeTodoListFilter('completed', props.todoListID), [props.changeTodoListFilter])\r\n\r\n  return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n          <IconButton onClick={removeTodolist} color={'secondary'}>\r\n            <Delete/>\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: 0}}>\r\n          {tasksJSXElements}\r\n        </ul>\r\n        <div>\r\n          <Button\r\n              variant={filter === 'all' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetAllFilter}>All\r\n          </Button>\r\n          <Button\r\n              style={{marginLeft: '3px'}}\r\n              variant={filter === 'active' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetActiveFilter}>Active\r\n          </Button>\r\n          <Button\r\n              style={{marginLeft: '3px'}}\r\n              variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetCompletedFilter}>Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n  )\r\n});\r\n\r\nexport default TodoList","import {TaskType} from './App';\r\nimport {Checkbox, IconButton} from '@material-ui/core';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Delete} from '@material-ui/icons';\r\nimport {ChangeEvent, memo, useCallback} from 'react';\r\n\r\ntype PropsType = {\r\n  task: TaskType\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  todoListID: string\r\n}\r\n\r\n\r\nconst Task = memo((props: PropsType) => {\r\n  let taskClass = props.task.isDone ? 'is-done' : ''\r\n\r\n  const removeTask = () => props.removeTask(props.task.id, props.todoListID)\r\n  const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todoListID)\r\n  }\r\n  const changeTaskTitle = useCallback((title: string) => {\r\n    props.changeTaskTitle(props.task.id, title, props.todoListID)\r\n  }, [props.changeTaskTitle, props.task.id, props.todoListID])\r\n\r\n  return (\r\n      <li>\r\n          <span className={taskClass}>\r\n            <Checkbox\r\n                size={'small'}\r\n                color={'primary'}\r\n                checked={props.task.isDone}\r\n                onChange={changeTaskStatus}\r\n            />\r\n            <EditableSpan title={props.task.title} changeTitle={changeTaskTitle}/>\r\n          </span>\r\n        <IconButton onClick={removeTask} color={'secondary'}>\r\n          <Delete/>\r\n        </IconButton>\r\n      </li>\r\n  )\r\n})\r\n\r\nexport default Task","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n      <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}