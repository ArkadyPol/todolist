{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onClickAddItem","validatedTitle","trim","addItem","TextField","variant","size","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","onClick","color","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","autoFocus","onBlur","onDoubleClick","TodoList","filter","tasksJSXElements","tasks","map","t","taskClass","isDone","className","Checkbox","checked","changeTaskStatus","id","todoListID","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTask","style","listStyle","padding","Button","changeTodoListFilter","marginLeft","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","tl","taskID","copyTasks","newTask","todoListsComponents","tasksForTodoList","getFilteredTasks","Grid","item","Paper","elevation","AppBar","position","Toolbar","justifyContent","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.78caae8d.chunk.js","sourcesContent":["import {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<boolean>(false)\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    setError(false)\r\n  }\r\n  const onClickAddItem = () => {\r\n    const validatedTitle = title.trim()\r\n    if (validatedTitle) {\r\n      props.addItem(validatedTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle('')\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      onClickAddItem()\r\n    }\r\n  }\r\n  return (\r\n      <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            size={'small'}\r\n            value={title}\r\n            onChange={onChangeTitle}\r\n            onKeyPress={onKeyPressAddItem}\r\n            label={'Title'}\r\n            error={error}\r\n            helperText={error && 'Title is required!'}\r\n        />\r\n        <IconButton onClick={onClickAddItem} color={'primary'}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default AddItemForm","import {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n  const [title, setTitle] = useState<string>(props.title)\r\n  const [editMode, setEditMode] = useState(false)\r\n  const onEditMode = () => setEditMode(true)\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n  const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      offEditMode()\r\n    }\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n  return (\r\n      editMode\r\n          ? /*<input value={title} autoFocus={true} onBlur={offEditMode} onChange={onChangeTitle}\r\n                   onKeyPress={onEnterOffEditMode}/>*/\r\n          <TextField\r\n              value={title}\r\n              autoFocus={true}\r\n              onChange={onChangeTitle}\r\n              onKeyPress={onEnterOffEditMode}\r\n              onBlur={offEditMode}\r\n          />\r\n          : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan","import {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype PropsTodoListType = {\r\n  todoListID: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  addTask: (title: string, todoListID: string) => void\r\n  changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n  changeTodoListTitle: (title: string, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n  const {filter} = props\r\n\r\n  const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n\r\n  const tasksJSXElements = props.tasks.map(t => {\r\n    const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n      props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n    }\r\n    const changeTaskTitle = (title: string) => {\r\n      props.changeTaskTitle(t.id, title, props.todoListID)\r\n    }\r\n\r\n    let taskClass = t.isDone ? 'is-done' : ''\r\n    return (\r\n        <li key={t.id}>\r\n          <span className={taskClass}>\r\n            <Checkbox\r\n                size={'small'}\r\n                color={'primary'}\r\n                checked={t.isDone}\r\n                onChange={changeTaskStatus}\r\n            />\r\n            <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n          </span>\r\n          <IconButton onClick={removeTask} color={'secondary'}>\r\n            <Delete/>\r\n          </IconButton>\r\n        </li>\r\n    )\r\n  })\r\n\r\n  const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n  const removeTodolist = () => props.removeTodoList(props.todoListID)\r\n  const onClickSetAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n  const onClickSetActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n  const onClickSetCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n\r\n  return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n          <IconButton onClick={removeTodolist} color={'secondary'}>\r\n            <Delete/>\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: 0}}>\r\n          {tasksJSXElements}\r\n        </ul>\r\n        <div>\r\n          <Button\r\n              variant={filter === 'all' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetAllFilter}>All\r\n          </Button>\r\n          <Button\r\n              style={{marginLeft: '3px'}}\r\n              variant={filter === 'active' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetActiveFilter}>Active\r\n          </Button>\r\n          <Button\r\n              style={{marginLeft: '3px'}}\r\n              variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetCompletedFilter}>Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","import {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n  const todoListID_1 = v1()\r\n  const todoListID_2 = v1()\r\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n  ])\r\n\r\n  const [tasks, setTasks] = useState<TasksStateType>(\r\n      {\r\n        [todoListID_1]: [\r\n          {id: v1(), title: 'HTML', isDone: true},\r\n          {id: v1(), title: 'CSS', isDone: true},\r\n          {id: v1(), title: 'JS', isDone: true},\r\n          {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n          {id: v1(), title: 'Milk', isDone: false},\r\n          {id: v1(), title: 'Bread', isDone: true},\r\n          {id: v1(), title: 'Meat', isDone: false},\r\n        ]\r\n      }\r\n  )\r\n\r\n  function changeTodoListFilter(filter: FilterValuesType, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n  }\r\n\r\n  function changeTodoListTitle(title: string, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl))\r\n  }\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID);\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function addTask(title: string, todoListID: string) {\r\n    const newTask: TaskType = {\r\n      id: v1(),\r\n      title,\r\n      isDone: false\r\n    }\r\n    setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n  }\r\n\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n\r\n  function removeTodoList(todoListID: string) {\r\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n    const copyTasks = {...tasks}\r\n    delete copyTasks[todoListID]\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function addTodoList(title: string) {\r\n    const newTodoListID = v1()\r\n    const newTodoList: TodoListType = {\r\n      id: newTodoListID,\r\n      title,\r\n      filter: 'all'\r\n    }\r\n    setTodoLists([...todoLists, newTodoList])\r\n    setTasks({...tasks, [newTodoListID]: []})\r\n  }\r\n\r\n\r\n  function getFilteredTasks(tl: TodoListType) {\r\n    switch (tl.filter) {\r\n      case 'active':\r\n        return tasks[tl.id].filter(t => !t.isDone)\r\n      case 'completed':\r\n        return tasks[tl.id].filter(t => t.isDone)\r\n      default:\r\n        return tasks[tl.id]\r\n    }\r\n  }\r\n\r\n  const todoListsComponents = todoLists.map(tl => {\r\n    const tasksForTodoList = getFilteredTasks(tl)\r\n    return (\r\n        <Grid item key={tl.id}>\r\n          <Paper elevation={5} style={{padding: '20px'}}>\r\n            <TodoList\r\n                todoListID={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={tasksForTodoList}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n                addTask={addTask}/>\r\n          </Paper>\r\n        </Grid>\r\n    )\r\n  })\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <AppBar position={'static'}>\r\n          <Toolbar style={{justifyContent: 'space-between'}}>\r\n            <IconButton color={'inherit'}>\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant={'h6'}>\r\n              Todolists\r\n            </Typography>\r\n            <Button\r\n                color={'inherit'}\r\n                variant={'outlined'}\r\n            >Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding: '20px 0'}}><AddItemForm addItem={addTodoList}/></Grid>\r\n          <Grid container spacing={5}> {todoListsComponents}</Grid>\r\n        </Container>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}