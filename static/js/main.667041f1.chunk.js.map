{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","App.tsx","TodoList.tsx","serviceWorker.ts","index.tsx"],"names":[],"mappings":"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","file":"static/js/main.667041f1.chunk.js","sourcesContent":["import {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<boolean>(false)\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n    setError(false)\r\n  }\r\n  const onClickAddItem = () => {\r\n    const validatedTitle = title.trim()\r\n    if (validatedTitle) {\r\n      props.addItem(validatedTitle)\r\n    } else {\r\n      setError(true)\r\n    }\r\n    setTitle('')\r\n  }\r\n  const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      onClickAddItem()\r\n    }\r\n  }\r\n  return (\r\n      <div>\r\n        <TextField\r\n            variant={'outlined'}\r\n            size={'small'}\r\n            value={title}\r\n            onChange={onChangeTitle}\r\n            onKeyPress={onKeyPressAddItem}\r\n            label={'Title'}\r\n            error={error}\r\n            helperText={error && 'Title is required!'}\r\n        />\r\n        <IconButton onClick={onClickAddItem} color={'primary'}>\r\n          <AddBox/>\r\n        </IconButton>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default AddItemForm","import {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string\r\n  changeTitle: (title: string) => void\r\n}\r\n\r\n\r\nfunction EditableSpan(props: EditableSpanPropsType) {\r\n  const [title, setTitle] = useState<string>(props.title)\r\n  const [editMode, setEditMode] = useState(false)\r\n  const onEditMode = () => setEditMode(true)\r\n  const offEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeTitle(title)\r\n  }\r\n  const onEnterOffEditMode = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      offEditMode()\r\n    }\r\n  }\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n  return (\r\n      editMode\r\n          ? /*<input value={title} autoFocus={true} onBlur={offEditMode} onChange={onChangeTitle}\r\n                   onKeyPress={onEnterOffEditMode}/>*/\r\n          <TextField\r\n              value={title}\r\n              autoFocus={true}\r\n              onChange={onChangeTitle}\r\n              onKeyPress={onEnterOffEditMode}\r\n              onBlur={offEditMode}\r\n          />\r\n          : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan","import {useState} from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n  const todoListID_1 = v1()\r\n  const todoListID_2 = v1()\r\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListID_2, title: 'What to buy', filter: 'all'},\r\n  ])\r\n\r\n  const [tasks, setTasks] = useState<TasksStateType>(\r\n      {\r\n        [todoListID_1]: [\r\n          {id: v1(), title: 'HTML', isDone: true},\r\n          {id: v1(), title: 'CSS', isDone: true},\r\n          {id: v1(), title: 'JS', isDone: true},\r\n          {id: v1(), title: 'React', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n          {id: v1(), title: 'Milk', isDone: false},\r\n          {id: v1(), title: 'Bread', isDone: true},\r\n          {id: v1(), title: 'Meat', isDone: false},\r\n        ]\r\n      }\r\n  )\r\n\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].filter(t => t.id !== taskID)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function addTask(title: string, todoListID: string) {\r\n    const newTask: TaskType = {\r\n      id: v1(),\r\n      title,\r\n      isDone: false\r\n    }\r\n    setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]})\r\n  }\r\n\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, isDone} : t)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n    const copyTasks = {...tasks}\r\n    copyTasks[todoListID] = tasks[todoListID].map(t => t.id === taskID ? {...t, title} : t)\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function changeTodoListFilter(filter: FilterValuesType, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, filter} : tl))\r\n  }\r\n\r\n  function changeTodoListTitle(title: string, todoListID: string) {\r\n    setTodoLists(todoLists.map(tl => tl.id === todoListID ? {...tl, title} : tl))\r\n  }\r\n\r\n  function removeTodoList(todoListID: string) {\r\n    setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n    const copyTasks = {...tasks}\r\n    delete copyTasks[todoListID]\r\n    setTasks(copyTasks)\r\n  }\r\n\r\n  function addTodoList(title: string) {\r\n    const newTodoListID = v1()\r\n    const newTodoList: TodoListType = {\r\n      id: newTodoListID,\r\n      title,\r\n      filter: 'all'\r\n    }\r\n    setTodoLists([...todoLists, newTodoList])\r\n    setTasks({...tasks, [newTodoListID]: []})\r\n  }\r\n\r\n\r\n  function getFilteredTasks(tl: TodoListType) {\r\n    switch (tl.filter) {\r\n      case 'active':\r\n        return tasks[tl.id].filter(t => !t.isDone)\r\n      case 'completed':\r\n        return tasks[tl.id].filter(t => t.isDone)\r\n      default:\r\n        return tasks[tl.id]\r\n    }\r\n  }\r\n\r\n  const todoListsComponents = todoLists.map(tl => {\r\n    const tasksForTodoList = getFilteredTasks(tl)\r\n    return (\r\n        <Grid item key={tl.id}>\r\n          <Paper elevation={5} style={{padding: '20px'}}>\r\n            <TodoList\r\n                todoListID={tl.id}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                tasks={tasksForTodoList}\r\n                removeTask={removeTask}\r\n                removeTodoList={removeTodoList}\r\n                changeTodoListFilter={changeTodoListFilter}\r\n                changeTodoListTitle={changeTodoListTitle}\r\n                changeTaskStatus={changeTaskStatus}\r\n                changeTaskTitle={changeTaskTitle}\r\n                addTask={addTask}/>\r\n          </Paper>\r\n        </Grid>\r\n    )\r\n  })\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <AppBar position={'static'}>\r\n          <Toolbar style={{justifyContent: 'space-between'}}>\r\n            <IconButton color={'inherit'}>\r\n              <Menu/>\r\n            </IconButton>\r\n            <Typography variant={'h6'}>\r\n              Todolists\r\n            </Typography>\r\n            <Button\r\n                color={'inherit'}\r\n                variant={'outlined'}\r\n            >Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding: '20px 0'}}><AddItemForm addItem={addTodoList}/></Grid>\r\n          <Grid container spacing={5}> {todoListsComponents}</Grid>\r\n        </Container>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import {ChangeEvent} from 'react';\r\nimport {FilterValuesType, TaskType} from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\ntype PropsTodoListType = {\r\n  todoListID: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  addTask: (title: string, todoListID: string) => void\r\n  changeTodoListFilter: (filterValue: FilterValuesType, todoListID: string) => void\r\n  changeTodoListTitle: (title: string, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsTodoListType) {\r\n  const {filter} = props\r\n\r\n  const addTask = (title: string) => props.addTask(title, props.todoListID)\r\n\r\n  const tasksJSXElements = props.tasks.map(t => {\r\n    const removeTask = () => props.removeTask(t.id, props.todoListID)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n      props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID)\r\n    }\r\n    const changeTaskTitle = (title: string) => {\r\n      props.changeTaskTitle(t.id, title, props.todoListID)\r\n    }\r\n\r\n    let taskClass = t.isDone ? 'is-done' : ''\r\n    return (\r\n        <li key={t.id}>\r\n          <span className={taskClass}>\r\n            <Checkbox\r\n                size={'small'}\r\n                color={'primary'}\r\n                checked={t.isDone}\r\n                onChange={changeTaskStatus}\r\n            />\r\n            <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\r\n          </span>\r\n          <IconButton onClick={removeTask} color={'secondary'}>\r\n            <Delete/>\r\n          </IconButton>\r\n        </li>\r\n    )\r\n  })\r\n\r\n  const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\r\n  const removeTodolist = () => props.removeTodoList(props.todoListID)\r\n  const onClickSetAllFilter = () => props.changeTodoListFilter('all', props.todoListID)\r\n  const onClickSetActiveFilter = () => props.changeTodoListFilter('active', props.todoListID)\r\n  const onClickSetCompletedFilter = () => props.changeTodoListFilter('completed', props.todoListID)\r\n\r\n  return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\r\n          <IconButton onClick={removeTodolist} color={'secondary'}>\r\n            <Delete/>\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <ul style={{listStyle: 'none', padding: 0}}>\r\n          {tasksJSXElements}\r\n        </ul>\r\n        <div>\r\n          <Button\r\n              variant={filter === 'all' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetAllFilter}>All\r\n          </Button>\r\n          <Button\r\n              style={{marginLeft: '3px'}}\r\n              variant={filter === 'active' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetActiveFilter}>Active\r\n          </Button>\r\n          <Button\r\n              style={{marginLeft: '3px'}}\r\n              variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n              color={'primary'}\r\n              size={'small'}\r\n              onClick={onClickSetCompletedFilter}>Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default TodoList","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}